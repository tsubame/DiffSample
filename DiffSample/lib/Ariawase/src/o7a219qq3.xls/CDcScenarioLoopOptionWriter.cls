VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "CDcScenarioLoopOptionWriter"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Explicit


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''
''  CDcScenarioLoopOptionWriter.cls
''  Implementation of the  Class CDcScenarioLoopOptionWriter
''  Generated by Enterprise Architect
''  Created on:      2013/06/07 18:45:59
''  Original author: 0145184306
''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Implements IParameterWriter
Implements IActionStream

Private mFilePath As String
Private mCategoryName As String
Private mGroupIndex As Collection
Private mCounter As Long
Private mSiteMode As Long
Private mTime As Double

Private Const AVG_NUM As Long = 1
Private Const WAIT As String = "0mS"
Private mParamData As Collection

Private mFolderPath As String
Private Const FILE_EXTENSION As String = ".csv"

Private mSamplingLimit As Long
Private mSamplingMode As SAMPLING_PARAM
Private mMemory As Collection

Public Function AsIParameterWriter() As IParameterWriter
    Set AsIParameterWriter = Me
End Function
Public Function AsIActionStream() As IActionStream
    Set AsIActionStream = Me
End Function

Private Sub IParameterWriter_WriteAsDouble(ByVal dataName As String, ByVal dblData As Double)
    Select Case dataName:
        Case EXAMIN_TIMESTAMP:
            mTime = dblData
        Case SAMPLE_MODE_COUNTS:
            mSamplingLimit = dblData
            mSamplingMode = PARAM_COUNTS
        Case SAMPLE_MODE_TIME:
            mSamplingLimit = dblData
            mSamplingMode = PARAM_TIME
        Case Else
    End Select
End Sub

Private Sub IParameterWriter_WriteAsString(ByVal dataName As String, ByVal strData As String)
    Select Case dataName:
        Case TEST_PINS, MEASURE_LABEL, USERMACRO_UNIT:
            mParamData.Add strData, dataName
        Case TEST_CATEGORY:
            mCategoryName = strData
        Case EXAMIN_RESULT:
            Dim dataList As New Collection
            Dim currData As Variant
            Dim dataIndex As Long
            Set dataList = DecomposeStringList(strData)
            Select Case mParamData.Item(USERMACRO_UNIT)
                Case NOT_DEFINE:
                    For Each currData In dataList
                        printData CDbl(currData), dataIndex
                        dataIndex = dataIndex + 1
                    Next currData
                Case Else
                    Dim MainUnit As String
                    Dim SubUnit As String
                    Dim SubValue As Double
                    SplitUnitValue "999" & mParamData.Item(USERMACRO_UNIT), MainUnit, SubUnit, SubValue
                    For Each currData In dataList
                        printData CDbl(currData) / SubUnitToValue(SubUnit), dataIndex
                        dataIndex = dataIndex + 1
                    Next currData
            End Select
        Case Else
    End Select
End Sub

Private Sub IParameterWriter_WriteAsInteger(ByVal dataName As String, ByVal intData As Integer)
End Sub

Private Sub IParameterWriter_WriteAsLong(ByVal dataName As String, ByVal lngData As Long)
    Select Case dataName:
        Case REPEAT_COUNTER:
            mCounter = lngData
        Case SITE_INDEX:
            mSiteMode = lngData
        Case Else
    End Select
End Sub

Private Sub IParameterWriter_WriteAsBoolean(ByVal dataName As String, ByVal blnData As Boolean)
End Sub

Private Sub IActionStream_MoveNextCategory()
End Sub

Private Sub IActionStream_SetDataLocation(ByVal dataIndex As Long)
End Sub

Private Function IActionStream_IsEndOfCategory() As Boolean
        IActionStream_IsEndOfCategory = False
End Function

Private Sub IActionStream_MoveNextGroup()
End Sub

Private Function IActionStream_IsEndOfGroup() As Boolean
        IActionStream_IsEndOfGroup = False
End Function

Private Sub IActionStream_MoveNextData()
    Set mParamData = New Collection
End Sub

Private Function IActionStream_IsEndOfData() As Boolean
        IActionStream_IsEndOfData = False
End Function

Private Sub IActionStream_SetCategoryLocation(ByVal dataName As String)
    mCategoryName = dataName
End Sub

Private Sub IActionStream_Rewind()
    Set mGroupIndex = New Collection
    Set mParamData = New Collection
    Set mMemory = New Collection
    mCounter = 0
End Sub

Private Sub IActionStream_SetGroupLocation(ByVal GroupIndex As Long)
    On Error Resume Next
    Call mGroupIndex.Add(GroupIndex, CStr(GroupIndex))
    On Error GoTo 0
End Sub

Private Sub IActionStream_SeekChangedLocation()
End Sub

Public Sub WriteFile(ByVal pFileName As String)
    Dim FileNo As Integer
    Dim filePath As String
    
    FileNo = FreeFile
    filePath = mFolderPath & Application.PathSeparator & createFileName
    
    On Error GoTo OPEN_ERROR
    Open filePath For Output As FileNo
    
    Print #FileNo, "TEST_CATEGORY"; ","; mCategoryName
    Print #FileNo, "MEASURE_GROUP"; ","; ComposeStringList(mGroupIndex)
    Print #FileNo, "AVERAGING"; ","; AVG_NUM
    Print #FileNo, "REFERENCE_WAIT"; ","; WAIT
    If mSamplingMode = PARAM_COUNTS Then
        Print #FileNo, "Sampling_Parameter"; ","; "Counts"; ","; mSamplingLimit
    ElseIf mSamplingMode = PARAM_TIME Then
        Print #FileNo, "Sampling_Parameter"; ","; "Time"; ","; mSamplingLimit
    End If
    Print #FileNo,
    Print #FileNo, "TIME[S],COUNTS,SITE,PIN_NAME,LABEL,RESULT,UNIT"
    Print #FileNo,
        
    Dim Data As Variant
    
    For Each Data In mMemory
        Print #FileNo, Data
    Next Data
    
    Close FileNo
    Exit Sub
    
OPEN_ERROR:
    Close FileNo
    Err.Raise 9999, "CDcScenarioLoopOptionWriter.WriteFile", "Opening the file is aborted!"
End Sub

Public Sub Initialize(ByVal pFolderPath As String)
    mFolderPath = pFolderPath
    Call Me.AsIActionStream.Rewind
End Sub

Private Sub Class_Initialize()
    Set mGroupIndex = Nothing
    Set mParamData = Nothing
    Set mMemory = Nothing
    Me.AsIActionStream.Rewind
End Sub

Private Sub Class_Terminate()
    Set mGroupIndex = Nothing
    Set mParamData = Nothing
    Set mMemory = Nothing
End Sub

Private Sub printData(ByVal resultValue As Double, ByVal dataIndex As Long)
    Dim prtStr As String
    prtStr = ""
    With mParamData
        prtStr = prtStr & Format(mTime, "#0.00000")
        prtStr = prtStr & "," & mCounter
        prtStr = prtStr & "," & dataIndex
        prtStr = prtStr & "," & .Item(TEST_PINS)
        prtStr = prtStr & "," & .Item(MEASURE_LABEL)
        prtStr = prtStr & "," & resultValue
        prtStr = prtStr & "," & .Item(USERMACRO_UNIT)
    End With
    Call mMemory.Add(prtStr)
End Sub

Private Function joinCollection(ByRef pCollection As Collection, Optional ByVal pDelimiter As String = ",") As String
    Dim res As String
    res = ""
    If pCollection.Count > 0 Then
        Dim var As Variant
        Dim resArr() As String
        Dim cnt As Integer
        ReDim resArr(pCollection.Count - 1)
        cnt = 0
        On Error GoTo CAST_ERROR
        For Each var In pCollection
            resArr(cnt) = CStr(var)
            cnt = cnt + 1
        Next var
        res = Join(resArr, pDelimiter)
        Erase resArr
    End If
    joinCollection = res
    
    Exit Function
CAST_ERROR:
    Erase resArr
    joinCollection = ""

End Function

Private Function createFileName() As String
    Dim siteMode As String
    If mSiteMode = ALL_SITE Then
        siteMode = "ALL"
    Else
        siteMode = CStr(mSiteMode)
    End If
    
    Dim groupIdx As String
    If mGroupIndex.Count = 0 Then
        groupIdx = ""
    ElseIf mGroupIndex.Count = 1 Then
        groupIdx = mGroupIndex.Item(1)
    Else
        groupIdx = mGroupIndex.Item(1) & "-" & mGroupIndex.Item(mGroupIndex.Count)
    End If
    createFileName = Replace(mCategoryName, " ", "") & "_PinGroup" & groupIdx & "_Site" & siteMode & "_" & getToday & FILE_EXTENSION

End Function

Private Function getToday() As String
    getToday = Format(DateTime.Now, "yymmdd") & "_" & Format(DateTime.Now, "hhnnss")
End Function
